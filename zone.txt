/*                 thisiscaau's  code              
        What’s happened happened. Which is an expression of faith 
    in the mechanics of the world. It’s not an excuse to do nothing.
*/
/* shortcuts */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define y1 nothing
typedef pair<ll,ll> ii;
typedef vector<ii> vii;
/* constants */
ll const inf = 1e9 + 7, MAXN = 2e5 + 5;
/* declaration */
ll x,y,n,l,x1,y1,s,s_,go,nx,ny;
ll mat[105][105];
ll cx[50000],cy[50000]; // current
ll dx[] = {-1,0,1,0};
ll dy[] = {0,1,0,-1};
/* workspace */
void dfs(ll x_,ll y_){
    ll nx,ny; s++;
    mat[x_][y_] = 2;
    for (int i = 0 ; i < 4 ; i++){
        nx = x_ + dx[i]; ny = y_ + dy[i];
        if (nx > 0 && ny > 0 && nx <= n && ny <= n && mat[nx][ny] == 0){
            dfs(nx,ny);
        }
    }
}
void dfs2(ll x_,ll y_){
    ll nx,ny; s_++;
    mat[x_][y_] = 2;
    for (int i = 0 ; i < 4 ; i++){
        nx = x_ + dx[i]; ny = y_ + dy[i];
        if (nx > 0 && nx <= n && ny > 0 && ny <= n && mat[nx][ny] == 1){
            dfs2(nx,ny);
        }
    }
}
bool check(ll x_,ll y_){
    /* check if filled */
    if (mat[x_][y_] != 0) return 0;
    ll i1,i2,j1,j2;
    i1 = x_;
    while (i1 && mat[i1][y_] == 0) i1--;
    if (i1 ==0) return 0;
    i2 = x_;
    while (i2 <= n && mat[i2][y_] == 0) i2++;
    if (i2 > n) return 0;
    j1 = y_;
    while (j1 && mat[x_][j1] == 0) j1--;
    if (j1 == 0) return 0;
    j2 = y_;
    while (j2 <= n && mat[x_][j2] == 0) j2++;
    if (j2 > n) return 0;
    return 1;
}
signed main(){
    freopen("ZONE.inp","r",stdin);
    freopen("ZONE.out","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    cin >> x >> y >> n >> l; 
    x1 = x ; y1 = y; cx[0] = x ; cy[0] = y;
    mat[x][y] = 1;
    for (int i = 1 ; i <= l ; i++){
        cin >> go;
        nx = x1 + dx[go-1], ny = y1 + dy[go-1];
        cx[i] = nx; cy[i] = ny;
        if (mat[nx][ny] == 1){
            break;
        }
        mat[nx][ny] = 1;
        x1 = nx , y1 = ny;
    }
    ll cnt = 0;
    for (int i = 0 ; i < l ; i++){
        if (cx[i] == nx && cy[i] == ny){
            break;
        }
        else {
            mat[cx[i]][cy[i]] = 0;
            cnt++;
        }
    }
    for (int i = 1 ; i <= n ; i++){
        for (int j = 1 ; j <= n ; j++){
            if (check(i,j)){
                dfs(i,j);
            }
        }
    }
    dfs2(cx[l],cy[l]);
    cnt = l - cnt;
    cout << cnt << endl;
    cout << s + s_/2 - 1;
}
#include <bits/stdc++.h>
using namespace std;

// wtf 
const int MAXN = 2e5 + 5;
int n, q, st[MAXN << 2], lz[MAXN << 2];

#define left node << 1, tl, tm 
#define right node << 1 | 1, tm + 1, tr 

void app(int node, int v){
    st[node] += v;
    lz[node] += v;
}

void push(int node){
    app(node << 1, lz[node]);
    app(node << 1 | 1, lz[node]);
    lz[node] = 0;
}

void build(int node = 1, int tl = 1, int tr = n){
    if (tl == tr){
        st[node] = a[tl];
        return;
    }
    int tm = (tl + tr) >> 1;
    // fuck this code
    build(left); build(right);
    st[node] = max(st[node << 1], st[node << 1 | 1]);
}

void upd(int l, int r, int v, int node = 1, int tl = 1, int tr = n){
    if (l > r || l > tr || tl > r) return;
    if (l <= tl && tr <= r){
        app(node, v);
        return;
    }
    int tm = (tl + tr) >> 1;
    push(node);
    upd(l, r, v, left);
    upd(l, r, v, right);
    st[node] = max(st[node << 1], st[node << 1 | 1]);
}

int query(int l, int r, int node = 1, int tl = 1, int tr = n){
    if (l > r || l > tr || tl > r) return -2e9;
    if (l <= tl && tr <= r) return st[node];
    return max(query(l, r, left), query(l, r, right));
}

signed main(){
    cin >> n;
    for (int i = 1; i <= n; i++){
        cin >> a[i];
    }
    build();
    cin >> q;
    while(q--){
        int l, r, v, t;
        cin >> t >> l >> r;
        if (t == 1){
            cout << query(l, r) << endl;
        }else{
            cin >> v; upd(l, r, v);
        }
    }
}
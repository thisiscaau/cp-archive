#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll n,level = 0,tot = 0,a;
ll dp[65][65][65],id[65][65][65];
signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    freopen("PYRAMID.inp","r",stdin);
    freopen("PYRAMID.out","w",stdout);
    cin >> n;
    while (tot < n) {
        level++;
        tot += level*level;
    }
    cout << level << " ";
    ll i = 1, j = 1, k = 1;
    for (int idx = 1 ; idx <= n ; idx++){
        cin >> a;
        dp[i][j][k] = a; id[i][j][k] = idx; // base
        if (i == j && i == k){
            i++; j = 1; k = 1;
        }
        else if (k == i){
            j++; k = 1;
        }
        else {
            k++;
        }
    }
    /* dp goes here */
    /* dp[i][j][k] level i grid [j][k] */
    for (int i = level-1 ; i >= 1 ; i--){
        for (int j = 1 ; j <= i ; j++){
            for (int k = 1 ; k <= i ; k++){
                dp[i][j][k] += min({dp[i+1][j][k],dp[i+1][j][k+1],dp[i+1][j+1][k],dp[i+1][j+1][k+1]});
            }
        }
    }
    cout << dp[1][1][1] << endl;
    /* backtracing */
    ll x = 1, y = 1; // apex
    for (int i = 1 ; i <= level; i++){
        cout << id[i][x][y] << " ";
        ll x_ = x, y_ = y, tmp = dp[i+1][x_][y_];
        if (dp[i+1][x][y+1] < tmp){
            tmp = dp[i+1][x][y+1];
            x_ = x; y_ = y+1;
        }
        if (dp[i+1][x+1][y] < tmp){
            tmp = dp[i+1][x+1][y];
            x_ = x+1; y_ = y;
        }
        if (dp[i+1][x+1][y+1] < tmp){
            tmp = dp[i+1][x][y+1];
            x_ = x+1; y_ = y+1;
        }
        x = x_, y = y_;
    }
}
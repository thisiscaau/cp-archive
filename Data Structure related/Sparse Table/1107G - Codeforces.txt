/* aurelion sol phu ho */
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define fi first
#define se second
#define pb push_back
#define mp make_pair
const ll N = 3e5 + 5;
ll pre[N], nxt[N];
ll d[N], c[N], diff[N];
ll f[19][N], g[19][N]; // sparse table
ll get_max(int l, int r) {
	int k = log2(r-l+1);
	return max(f[k][l], f[k][r-(1<<k)+1]);
}
ll get_min(int l, int r) {
	int k = log2(r-l+1);
	return min(g[k][l], g[k][r-(1<<k)+1]);
}
ll n,a,ans = 0;
signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	cin >> n >> a;
	for (int i = 1; i <= n; i++){
	    cin >> d[i] >> c[i];
	    c[i] = a - c[i];
	    ans = max(ans,c[i]);
	}
	for (int i = 1; i < n; i++){
	    diff[i] = d[i+1] - d[i];
	}
	for (int i = 1; i < n; i++) {
		int j = i - 1;
		while (j && diff[i] >= diff[j]) j = pre[j];
		pre[i] = j;
	}
	for (int i = n - 1; i > 0; i--) {
		int j = i + 1;
		while (j < n && diff[i] >= diff[j]) j = nxt[j];
		nxt[i] = j;
	}
	for (int i = 1; i <= n; i++) {
	    c[i] += c[i - 1];
	    f[0][i] = g[0][i] = c[i];
	}
	for (int i = 1; i < 19; i++) {
		for (int j = 0; j <= n; j++) {
			f[i][j] = f[i-1][j];
			g[i][j] = g[i-1][j];
			if (j + (1<<i-1) <= n) {
				f[i][j] = max(f[i][j], f[i-1][j+(1<<i-1)]);
				g[i][j] = min(g[i][j], g[i-1][j+(1<<i-1)]);
			}
		}
	}
	for (int i = 1; i < n; i++) 
	ans = max(ans, get_max(i + 1, nxt[i]) - get_min(pre[i], i - 1) - diff[i] * diff[i]);
	cout << ans << endl;
}
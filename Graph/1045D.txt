// aurelion sol phu ho
#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5 + 5;
int n,q;
double prob[MAXN],sum[MAXN];
vector<int> adj[MAXN];
int parent[MAXN];
bool vis[MAXN];
void dfs(int u){
    vis[u] = true;
    for (int v : adj[u]){
        if (v != parent[u] && !vis[v]){
            parent[v] = u;
            sum[u] += prob[v];
            dfs(v);
        }
    }
}
double res = 0;
int main(){
    scanf("%d", &n);
    for (int i = 0 ; i < n ; i++){
        scanf("%lf", &prob[i]);
        prob[i] = 1 - prob[i];
    }
    for (int i = 1 ; i < n ; i++){
        int u,v;
        scanf("%d %d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    memset(vis,false,sizeof(vis));
    memset(parent,-1,sizeof(parent));
    dfs(0);
    for (int i = 0 ; i < n ; i++){
        res += prob[i]*(1-sum[i]);
    }
    // query
    scanf("%d", &q);
    for (int i = 1 ; i <= q ; i++){
        int u; double dif;
        scanf("%d %lf", &u, &dif);
        dif = 1 - dif - prob[u];
        res += dif*(1-sum[u]);
        prob[u] += dif;
        if (u){
            res -= prob[parent[u]]*dif;
            sum[parent[u]] += dif;
        }
        printf("%lf\n", res);
    }
}
/*                 thisiscaau's  code              
        What’s happened happened. Which is an expression of faith 
    in the mechanics of the world. It’s not an excuse to do nothing.
*/
/* shortcuts */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fi first
#define se second
#define pb push_back
#define kill clgt
#define mp make_pair
typedef pair<ll,ll> ii;
typedef vector<ii> vii;
/* constants */
ll const inf = 1e9 + 7, MAXN = 2e5 + 5;
/* declaration */
ll n,m,opt;
ii ori;
ll dx[] = {-1,0,1,0};
ll dy[] = {0,1,0,-1};
bool hole[205][205];
ll dist[205][205];
/* workspace */
signed main(){
    freopen("CARTIE.inp","r",stdin);
    freopen("CARTIE.out","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> opt;
    if (opt == 2) return 0; // sarco
    cin >> n >> m;
    cin >> ori.fi >> ori.se;
    memset(dist,-1,sizeof(dist));
    ll cat; cin >> cat;
    for (int k = 1 ; k <= cat ; k++){
        ll x,y,range;
        cin >> x >> y >> range;
        for (int i = 0 ; i <= range ; i++){
            for (int j = 0 ; j <= range ; j++){
                if (i+j > range) continue;
                ll nx = x + i , ny = y + j;
                if (nx < 1 || ny < 1 || nx > n || ny > m) continue;
                dist[nx][ny] = -inf;
            }
        }
    }
    ll r; cin >> r;
    for (int i = 1 ; i <= r ; i++){
        ll x,y,x_,y_;
        cin >> x >> y >> x_ >> y_;
        hole[x][y] = true;
        hole[x_][y_] = true;
    }
    if (hole[ori.fi][ori.se]){
        cout << ori.fi << " " << ori.se << " " << "0";
        return 0;
    }
    vector<ii> bfs;
    bfs.pb(ori);
    dist[ori.fi][ori.se] = 0;
    for (int i = 0 ; i < bfs.size() ; i++){
        ii now = bfs[i];
        for (int r = 0 ; r < 4 ; r++){
            ll ni = now.fi + dx[r], nj = now.se + dy[r];
            if (ni < 1 || ni > n || nj < 1 || nj > m){
                    continue;
            }
            if (dist[ni][nj] != -1) continue;
            if (dist[ni][nj] == -inf) continue;
            ll to_dist = dist[now.fi][now.se] + 1;
            dist[ni][nj] = to_dist;
            bfs.pb(mp(ni,nj));
        }
    }
    ll mi = inf; ll x,y;
    for (int i = 1 ; i <= n ; i++){
        for (int j = 1 ; j <= m ; j++){
            if (hole[i][j] && dist[i][j] != -1 && dist[i][j] != -inf){
                if (dist[i][j] < mi){
                    mi = dist[i][j];
                    x = i, y = j;
                }
            }
        }
    }
    cout << x << " " << y << " " << mi << endl;
}